<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on TechNotes</title><link>http://technotes.guru/post/</link><description>Recent content in Posts on TechNotes</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 07 Oct 2017 00:00:00 +0000</lastBuildDate><atom:link href="http://technotes.guru/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Why I hate Ant</title><link>http://technotes.guru/post/2017/why-I-hate-ant/</link><pubDate>Sat, 07 Oct 2017 00:00:00 +0000</pubDate><guid>http://technotes.guru/post/2017/why-I-hate-ant/</guid><description>Apache Ant, yes, this is a great Java build tool I know of. It&amp;rsquo;s free (in all senses of the word), it&amp;rsquo;s a defacto standard in the 20th I think, and it generally works. But to working with the plain ant scripts is really painfully Write ant scripts are complex and verbose. Ant build files are generally typeless. There is no grand schema or DTD they can validate against. Hardly to maintain the ant scripts It&amp;rsquo;s almost impossible re-use someone else&amp;rsquo;s Ant target out of the box. Generally, because targets don&amp;rsquo;t take parameters, seems the only way is use the external property Ant has limited fault handling rules, and no persistence of state, so it cannot be used as a workflow tool for any workflow other than classic build and test processes. It&amp;rsquo;s not design to offer decision or looping</description></item></channel></rss>