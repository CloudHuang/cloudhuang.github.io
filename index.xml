<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TechNotes</title><link>https://technotes.guru/</link><description>Recent content on TechNotes</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 28 Feb 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://technotes.guru/index.xml" rel="self" type="application/rss+xml"/><item><title>代码重构 - 后端部分代码</title><link>https://technotes.guru/post/2019/refactor-the-backend/</link><pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate><guid>https://technotes.guru/post/2019/refactor-the-backend/</guid><description>前一篇 主要写了一下前端部分的重构，这一篇则主要关注后端部分。 在前一篇后面说到了一个很实用的套路（模式），其类图如下图所示： 在后端部分，我先将</description></item><item><title>代码重构 - 前端部分代码</title><link>https://technotes.guru/post/2019/refactor-the-frontend/</link><pubDate>Wed, 27 Feb 2019 00:00:00 +0000</pubDate><guid>https://technotes.guru/post/2019/refactor-the-frontend/</guid><description>缘起 由于工作的变动，转岗到了公司的另外一个项目里，目前的主要工作在编码方面，负责将一个原来标准的J2EE（Spring， SpringMVC，</description></item><item><title>以太坊智能合约开发入门</title><link>https://technotes.guru/post/2018/blockchain-eth-chaincode/</link><pubDate>Mon, 07 May 2018 00:00:00 +0000</pubDate><guid>https://technotes.guru/post/2018/blockchain-eth-chaincode/</guid><description>搭建智能合约开发环境 智能合约的开发环境依赖于node/npm，所以在构建开发环境之前需要确保开发机器已经安装好了node/npm的环境了。 如</description></item><item><title>Why I hate Ant</title><link>https://technotes.guru/post/2017/why-i-hate-ant/</link><pubDate>Sat, 07 Oct 2017 00:00:00 +0000</pubDate><guid>https://technotes.guru/post/2017/why-i-hate-ant/</guid><description>Apache Ant, yes, this is a great Java build tool I know of. It&amp;rsquo;s free (in all senses of the word), it&amp;rsquo;s a defacto standard in the 20th I think, and it generally works. But to working with the plain ant scripts is really painfully Write ant scripts are complex and verbose. Ant build files are generally typeless. There is no grand schema or DTD they can validate against. Hardly</description></item><item><title>About Me</title><link>https://technotes.guru/about/</link><pubDate>Tue, 10 Mar 2015 00:13:27 +0000</pubDate><guid>https://technotes.guru/about/</guid><description>开过好几个博客，CSDN有, JaveEye有，简书也有，这儿写写，那儿写写，慢慢的这儿那儿的博客却都几乎都荒废了，看了看JavaEye最近的</description></item><item><title>一个小项目的回顾</title><link>https://technotes.guru/post/2009/a-project-retrospection/</link><pubDate>Thu, 20 Aug 2009 00:00:00 +0000</pubDate><guid>https://technotes.guru/post/2009/a-project-retrospection/</guid><description>最近的一个项目，四个开发人员，大概做了一个月多一点，从需求，到最终代码的完成。 写思考，我想，主要还是要回顾一下在项目中遇到的问题，或是有什么</description></item><item><title>Rails生成Ext Tree</title><link>https://technotes.guru/post/2008/rails-ext-tree/</link><pubDate>Sat, 29 Mar 2008 00:00:00 +0000</pubDate><guid>https://technotes.guru/post/2008/rails-ext-tree/</guid><description>树形菜单是在开发中经常会遇到的一个功能，RoR的这个设计对于大数据量tree结构是最好的，比如一些常见的查询都可以避免循环或者递归抓取, 而且</description></item><item><title>Generic Data Access Objects －范型DAO类设计模式</title><link>https://technotes.guru/post/2007/the-generic-dao/</link><pubDate>Thu, 19 Apr 2007 00:00:00 +0000</pubDate><guid>https://technotes.guru/post/2007/the-generic-dao/</guid><description>Generic Data Access Objects －范型DAO类设计模式, DAO模式是最为经典的JAVA EE模式之一, 特别是自JDK5之后增加的泛型支持，大大增加了DAO的可复用性。</description></item><item><title>归档</title><link>https://technotes.guru/archives/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://technotes.guru/archives/</guid><description/></item><item><title>我的分享</title><link>https://technotes.guru/presentations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://technotes.guru/presentations/</guid><description>我做过的分享 Writing clean code ( The legacy Code )</description></item><item><title>搜索</title><link>https://technotes.guru/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://technotes.guru/search/</guid><description/></item></channel></rss>